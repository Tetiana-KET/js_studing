/*
ОБЪЕКТ 

Объекты для хранения именованных коллекций.
Объекты позволяют хранить данные со строковыми ключами.
не предоставляет методов управления порядком элементов. 
Мы не можем вставить новое свойство «между» уже существующими. 

MAP — 

это структура, которая хранит данные в парах ключ/значение, где каждый ключ уникален. 
позволяет использовать ключи любого типа.
Map может использовать объекты в качестве ключей.
Иногда её также называют ассоциативным массивом или словарём. 
Map часто используют для быстрого поиска данных. 
поменять порядок элементов или получить элемент напрямую по его номеру нельзя.
Она позволяет делать следующие вещи:

new Map() – создаёт коллекцию.
map.set(key, value) добавлять пары в коллекцию;
map.delete(key) - удалять пары из коллекции (удаляет элемент (пару «ключ/значение») по ключу key);
изменять существующей пары;
map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует,искать значение, связанное с определенным ключом.

МАССИВ

Массивы для хранения упорядоченных коллекций.
Элементы массива нумеруются, начиная с нуля.
Мы можем получить элемент, указав его номер в квадратных скобках:
а в качестве ключа – числовой индекс.
Массив — это обычный объект с дополнительной связью между целочисленными ключами его свойств и специальным свойством length.

СВЯЗНЫЙ СПИСОК — 

одна из базовых структур данных. Ее часто сравнивают с массивом, 
так как многие другие структуры можно реализовать с помощью либо массива, либо связного списка. 
Связный список состоит из группы узлов, которые вместе образуют последовательность. 
Каждый узел содержит две вещи: фактические данные, которые в нем хранятся (это могут быть данные любого типа) 
и указатель (или ссылку) на следующий узел в последовательности. 
Таким образом, все узлы последовательно связаны друг с другом.
Основные операции в связном списке включают добавление, удаление и поиск элемента в списке. 
 
Список – более гибкая структура, чем массив. Он позволяет быстрее и удобнее добавлять и удалять элементы в любом месте структуры.
В отличие от массивов, нет перенумерации, элементы легко переставляются.
Недостатком списка (в сравнении с массивами) является невозможность прямого доступа к конкретному элементу.
Чтобы найти нужный элемент в списке, нужно последовательно перебирать его узлы, начиная с головы, и сравнивать их значения с искомым.

СТЕК
Стек — это базовая структура данных, которая позволяет добавлять или удалять элементы только в её начале. Она похожа на стопку книг: если вы хотите взглянуть на книгу в середине стека, сперва придется убрать лежащие сверху.
Стек организован по принципу LIFO (Last In First Out, «последним пришёл — первым вышел») 

ОЧЕРЕДЬ 

устроена по принципу FIFO (First In First Out, «первый пришёл — первый вышел»). 
Это значит, что удалить элемент можно только после того, как были убраны все ранее добавленные элементы.
Очередь позволяет выполнять две основных операции: добавлять элементы в конец очереди (enqueue) и 
удалять первый элемент (dequeue).

SET - 

Объект Set – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз.
Множество хранит значения данных без определенного порядка, не повторяя их. Оно позволяет не только добавлять и удалять элементы: 
есть ещё несколько важных функций, которые можно применять к двум множествам сразу.
Объединение комбинирует все элементы из двух разных множеств, превращая их в одно (без дубликатов).  
Пересечение анализирует два множества и  создает еще одно из тех элементов, которые присутствуют в обоих изначальных множествах.
Разность выводит список элементов, которые есть в одном множестве, но отсутствуют в другом.
Подмножество выдает булево значение, которое показывает, включает ли одно множество все элементы другого множества.
Объекты Set представляют коллекции значений, по которым вы можете выполнить обход в порядке вставки элементов. 
Значение элемента в Set может присутствовать только в одном экземпляре, что обеспечивает его уникальность в коллекции Set.
поменять порядок элементов или получить элемент напрямую по его номеру нельзя.



ХЕШ-ТАБЛИЦА — 

это похожая на Map структура, которая содержит пары ключ/значение. 
Она использует хэш-функцию для вычисления индекса в массиве из блоков данных, чтобы найти желаемое значение.
Обычно хэш-функция принимает строку символов в качестве вводных данных и выводит числовое значение. 
Для одного и того же ввода хэш-функция должна возвращать одинаковое число. 
Если два разных ввода хэшируются с одним и тем же итогом, возникает коллизия. 
Цель в том, чтобы таких случаев было как можно меньше.  

Таким образом, когда вы вводите пару ключ/значение в хэш-таблицу, ключ проходит через хэш-функцию и превращается в число. 
В дальнейшем это число используется как фактический ключ, который соответствует определенному значению. 
Когда вы снова введёте тот же ключ, хэш-функция обработает его и вернет такой же числовой результат. 
Затем этот результат будет использован для поиска связанного значения. 
Такой подход заметно сокращает среднее время поиска.  

ДЕРЕВО — это структура данных, состоящая из узлов. Ей присущи следующие свойства:

Каждое дерево имеет корневой узел (вверху).
Корневой узел имеет ноль или более дочерних узлов.
Каждый дочерний узел имеет ноль или более дочерних узлов, и так далее.
У двоичного дерева поиска есть два дополнительных свойства:

Каждый узел имеет до двух дочерних узлов (потомков).
Каждый узел меньше своих потомков справа, а его потомки слева меньше его самого.
Двоичные деревья поиска позволяют быстро находить, добавлять и удалять элементы. 
Они устроены так, что время каждой операции пропорционально логарифму общего числа элементов в дереве.  
*/